#PROLOG

1. [10 points] Write a Prolog predicate max(L,Res) that computes the maximum number in an integer list L and
stores the result in Res. Assume that L contains at least 1 element.

E.g. |?-max([1,3,5,4,2], Res).
Res = 5 //5 is the maximum number in the list

-------------------------------------------------------------------------------------------------------------------
2. [15 points] Define a Prolog predicate insertNTerm(N,T,Res) that insert 1 immediately before every Nth argument
of a term T and store the results in Res.

E.g. | ?- insertNTerm(3,f(2,3,4,5,6,7,8),Res).
Res = f(2,3,4,1,5,6,7,1,8).
no

-------------------------------------------------------------------------------------------------------------------
3. [15 points] Write a Prolog predicate sublist(L, Res), which computes a list of all sublists of L and stores the result
in Res.

E.g. ?- sublist([1,2],Res).
Res = [[],[1],[2],[1,2]] or [[1,2],[],[1],[2]], or [[1],[],[2],[1,2]] etc.
?- sublist([1,2,3],Res).
Res = [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]], or [[1,2,3], [], [1],[2],[3],[1,2],[1,3],[2,3]] etc.

-------------------------------------------------------------------------------------------------------------------
4. [15 points] Write a Prolog program position(X, L, Res) that takes an integer X and an integer list L, returns a list
of positions of X in L. The result is stored in Res.

e.g. |?- position(1, [1,3,1,2,5,1], Res).
Res = [1,3,6].
No

-------------------------------------------------------------------------------------------------------------------
5. [10 points] Given two lists L1 and L2 that are sorted in ascending order, write a prolog predicate merge(L1,
L2, Res) that computes a list Res which contains all elements of L1 and L2 and is sorted in ascending order.

e.g. | ?- merge([1,3,4,6],[2,3,5],Res).
Res = [1,2,3,3,4,5,6].